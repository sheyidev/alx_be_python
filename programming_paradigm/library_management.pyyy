## Objective: Solidify understanding of basic OOP concepts in Python by implementing a system that tracks books in a library, focusing on classes, 
## object instantiation, and method invocation.

##Implement a Book class with public attributes title and author, 
# and a private attribute _is_checked_out to track its availability.

class Book():
    def __init__(self, title, author):
        self.title = title
        self.author = author
        self._is_checked_out = False
        "Book class should have methods to check a book out"
        "check a book out and return it"


    def check_out(self,title):
        if not self._is_checked_out:
            self._is_checked_out = True
            return True
        return False
    
    def return_book(self):
        if self._is_checked_out:
            self._is_checked_out = False
            return True
        return False

        """
        check_out() sets _is_checked_out to True if the book is not already checked out.
        return_book() sets _is_checked_out to False if the book is checked out.
        is_checked_out() returns the value of _is_checked_out.
        """


## Your Library class needs to manage a collection of books, including adding new books to the collection, 
## checking a book out (which marks it as unavailable), returning it (making it available again), and listing all available books.

class Library():
    def __init__(self):
        self._books = []
        #self._is_checked_out = True
    def add_book(self, books):
        for book in self.books:
            self._books.append(book)
        
    def check_out_book(self,title):
        for book in self._books:
            if book.title == title and not
    def return_book(self,title):
        pass
    def list_available_books(self):
        pass